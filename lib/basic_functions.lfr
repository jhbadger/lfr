(define + (ruby "|*args| args.reduce(:+)"))
(define * (ruby "|*args| args.reduce(:*)"))
(define - (ruby "|first,*rest| rest.reduce(first,:-)"))
(define / (ruby "|first,*rest| rest.reduce(first,:/)"))

(define < (ruby "|first, *rest| rest.collect {|x| first < x}.reduce(:&)"))
(define <= (ruby "|first, *rest| rest.collect {|x| first <= x}.reduce(:&)"))
(define > (ruby "|first, *rest| rest.collect {|x| first > x}.reduce(:&)"))
(define >= (ruby "|first, *rest| rest.collect {|x| first >= x}.reduce(:&)"))
(define = (ruby "|first, *rest| rest.collect {|x| first == x}.reduce(:&)"))

(define quit (ruby "@quit=true"))
(define list (ruby "|*list| Array(list)"))
(define car (ruby "|list| list.first"))
(define cdr (ruby "|list| list.drop 1"))
(define null? (ruby "|x| if x.is_a? Array;x.empty?;else;!x;end"))
(define cons (ruby "|x, list| [x] + list"))
(define map (ruby "|fn, list| list.map {|x| fn.call x}"))
(define reduce (ruby "|fn, *args| if args.size == 1;args[0].reduce &fn;else;args[1].reduce args[0],&fn;end"))
(define succ (ruby "|x| x.succ"))
(define pred (ruby "|x| x.pred"))
(define class (ruby "|x| x.class"))
(define methods (ruby "|x| x.methods"))
(define send (ruby "|x,*args| x.send *args"))
(define max (ruby "|list| list.max"))
(define min (ruby "|list| list.min"))
(define length (ruby "|x| x.length"))
(define print (ruby "|x| print x;x"))
(define range (ruby "|*x| if x[1].nil?;(1..x[0]).to_a;else (x[0]..x[1]).to_a;end"))
